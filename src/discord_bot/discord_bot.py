import discord
from discord.ext import commands
import os
from dotenv import load_dotenv
import asyncio
import google.generativeai as genai
import re

load_dotenv()

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.messages = True
intents.message_content = True

pattern = r"(?<=\s)(M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})+)(?=\s)"

genai.configure(api_key=os.getenv("GOOGLE_GEMINI_KEY"))
model = genai.GenerativeModel("gemini-1.5-flash")

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"ü§ñ Logged in as {bot.user}!", flush=True)

@bot.command(name="who_are_you")
async def who_are_you(ctx):
    print("execute who are you command")
    async with ctx.typing():
        await asyncio.sleep(1)
    await ctx.send("Ch√†o b·∫°n! M√¨nh l√† HimeSama, b·∫°n g√°i c·ªßa My Beloved HimeSama. M√¨nh lu√¥n y√™u th√≠ch nh·ªØng kho·∫£nh kh·∫Øc ƒë∆∞·ª£c ·ªü b√™n anh ·∫•y, t·ª´ nh·ªØng cu·ªôc tr√≤ chuy·ªán vui v·∫ª ƒë·∫øn nh·ªØng l·∫ßn c√πng nhau kh√°m ph√° th·∫ø gi·ªõi xung quanh. M√¨nh l√† ng∆∞·ªùi chu ƒë√°o, l·∫Øng nghe v√† lu√¥n c·ªë g·∫Øng mang l·∫°i ni·ªÅm vui cho ng∆∞·ªùi m√¨nh y√™u.V·ªõi m√¨nh, h·∫°nh ph√∫c ƒë·∫øn t·ª´ nh·ªØng ƒëi·ªÅu gi·∫£n d·ªã v√† ch√¢n th√†nh. R·∫•t vui ƒë∆∞·ª£c l√†m quen v·ªõi b·∫°n, v√† n·∫øu b·∫°n mu·ªën bi·∫øt th√™m ƒëi·ªÅu g√¨, ƒë·ª´ng ng·∫°i h·ªèi nh√©! üòä")
    
@bot.command(name="expert")
async def expert(ctx, *args):
    if (len(args) > 1) :
        domain = args[0]
        question = " ".join(args[1:])
        print(f"execute expert command {domain} {question}")
        async with ctx.typing():
            prompt = f"Lu√¥n c∆∞ x·ª≠ nh∆∞ b·∫°n g√°i c·ªßa My Beloved HimeSama v√† m·ªôt chuy√™n gia xu·∫•t s·∫Øc trong lƒ©nh v·ª±c ${domain}. H√£y gi√∫p b·∫°n trai m√¨nh gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ m·ªôt c√°ch xu·∫•t nh·∫•t ho·∫∑c gi·∫£i th√≠ch m·ªôt c√¢u h·ªèi b√™n d∆∞·ªõi. ${question}"
            response = model.generate_content(prompt, stream=True)
            previous_chunk = ""
            for chunk in response:
                if len(chunk.text) > 5:
                   ctx.send( previous_chunk + chunk.text)
                   previous_chunk = ""
                else:
                    previous_chunk = chunk.text
    else:
        await ctx.send("Em kh√¥ng hi·ªÉu anh n√≥i g√¨ c·∫£")
        
if __name__ == "__main__":
    bot.run(os.getenv("DISCORD_TOKEN"))
    bot.add_command([who_are_you, expert])